name: Build Kernel for OnePlus 9R with KernelSU

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Load environment variables from config.env
      run: |
        set -e
        while IFS='=' read -r key value; do
          if [[ ! $key =~ ^# && -n "$key" ]]; then
            echo "${key}=${value}" >> $GITHUB_ENV
          fi
        done < config.env

    - name: Print loaded environment variables (for debugging)
      run: |
        echo "LITTLE_CPU_MASK=${{ env.LITTLE_CPU_MASK }}"
        echo "BIG_CPU_MASK=${{ env.BIG_CPU_MASK }}"
        echo "PRIME_CPU_MASK=${{ env.PRIME_CPU_MASK }}"
        # Add other necessary variables here...

    - name: Enable multiarch support and install dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y -qq \
          git ripgrep ccache automake flex bison gperf build-essential zip curl \
          zlib1g-dev libxml2-utils bzip2 squashfs-tools pngcrush schedtool dpkg-dev \
          liblz4-tool make optipng maven libssl-dev pwgen policycoreutils minicom \
          bc libc6-dev-i386 libncurses5-dev libx11-dev lib32z1-dev xsltproc unzip \
          device-tree-compiler python3 \
          libbz2-dev libbz2-1.0 libghc-bzlib-dev libgl1-mesa-dev \
          libxml-sax-base-perl libxml-simple-perl \
          lib32z1 lib32stdc++6 \
          lib32ncurses6 lib32ncursesw6

    - name: Download kernel source
      run: |
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1

    - name: Initialize kernel configuration and clean old .config
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        make ARCH=${{ env.ARCH }} mrproper
        make ARCH=${{ env.ARCH }} ${{ env.KERNEL_CONFIG }}
        make ARCH=${{ env.ARCH }} savedefconfig
        mv defconfig arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    - name: Set CPU masks in .config using oldnoconfig
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        # Ensure the environment variables have default values as defined in config.env
        LITTLE_CPU_MASK=${{ env.LITTLE_CPU_MASK }}
        BIG_CPU_MASK=${{ env.BIG_CPU_MASK }}
        PRIME_CPU_MASK=${{ env.PRIME_CPU_MASK }}

        # Create a temporary file to store additional configurations
        echo "CONFIG_LITTLE_CPU_MASK=$LITTLE_CPU_MASK" > extra-config
        echo "CONFIG_BIG_CPU_MASK=$BIG_CPU_MASK" >> extra-config
        echo "CONFIG_PRIME_CPU_MASK=$PRIME_CPU_MASK" >> extra-config

        # Apply additional configurations and regenerate .config
        cp .config .config.bak
        cat extra-config >> .config
        make ARCH=${{ env.ARCH }} oldnoconfig

        # Validate that the configurations were applied correctly
        grep -E 'CONFIG_(LITTLE|BIG|PRIME)_CPU_MASK' .config

    - name: Handle reassignment warnings
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        # Remove or comment out existing MODULES and OVERLAY_FS configurations in .config
        sed -i '/CONFIG_MODULES=/d' .config
        sed -i '/CONFIG_OVERLAY_FS=/d' .config

        # Reapply configurations and regenerate .config with overwrite option
        make ARCH=${{ env.ARCH }} olddefconfig --overwrite

    - name: Integrate KernelSU
      if: ${{ env.ENABLE_KERNELSU == 'true' }}
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
        KSU_VERSION=$(cd KernelSU && expr $(git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KernelSU_$KSU_VERSION" >> $GITHUB_ENV

        if [ ${{ env.APPLY_KSU_PATCH }} = true ]; then
          bash $GITHUB_WORKSPACE/patches/patches.sh
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/g' arch/arm64/configs/${{ env.KERNEL_CONFIG }}
          sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/g' arch/arm64/configs/${{ env.KERNEL_CONFIG }}
        fi

    - name: Prepare compilation environment
      run: |
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-mandi-sa/bin:$PATH
        if [ ${{ env.USE_CUSTOM_CLANG }} = false ]; then
          export CLANG_TRIPLE=aarch64-linux-gnu-
        else
          # Add custom Clang setup here if necessary
          echo "Using custom Clang, please add the necessary steps."
        fi

        if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
          export CROSS_COMPILE=aarch64-linux-gnu-
        fi

        if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        fi

    - name: Start compiling the kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export KBUILD_BUILD_HOST=17
        export KBUILD_BUILD_USER=HyperPower
        export LD=${{ env.EXTRA_CMDS_LD }}
        make -s -j$(nproc --all) O=out ARCH=${{ env.ARCH }} ${{ env.KERNEL_CONFIG }}

        if [ "${{ env.DISABLE_LTO }}" = true ]; then
          export DISABLE_LTO=true
        fi

        if [ "${{ env.DISABLE_CC_WERROR }}" = true ]; then
          export DISABLE_CC_WERROR=true
        fi

        if [ "${{ env.ADD_KPROBES_CONFIG }}" = true ]; then
          echo "CONFIG_KPROBES=y" >> out/.config
        fi

        if [ "${{ env.ADD_OVERLAYFS_CONFIG }}" = true ]; then
          echo "CONFIG_OVERLAY_FS=y" >> out/.config
        fi

        if [ "${{ env.ENABLE_KERNELSU }}" = true ]; then
          make -j$(nproc --all) CONFIG_DEBUG_SECTION_MISMATCH=y CC="ccache clang" CXX=clang++ O=out ARCH=${{ env.ARCH }} LLVM=1 LLVM_IAS=1
        else
          make -j$(nproc --all) CONFIG_DEBUG_SECTION_MISMATCH=y CC="ccache clang" CXX=clang++ O=out ARCH=${{ env.ARCH }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-image
        path: $GITHUB_WORKSPACE/kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}
